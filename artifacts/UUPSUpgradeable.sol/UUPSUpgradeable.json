{"abi":[{"type":"function","name":"UPGRADE_INTERFACE_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"name":"slot","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","proxiableUUID()":"52d1902d","upgradeToAndCall(address,bytes)":"4f1ef286"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"UPGRADE_INTERFACE_VERSION\":{\"details\":\"The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)` and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called, while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string. If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must be the empty byte string if no function should be called, being impossible to invoke the `receive` function during an upgrade.\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin/=contracts/\"]},\"sources\":{\"contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1ce621ae6673e12e26e7aa8316fa1ba6efaaddba28ecf3b061632a608d3e85f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d96d895818504e305df65cc1b08e40fa184a4d63f651519f236447766e8936bb\",\"dweb:/ipfs/Qma7LsfZyEbwtmN3gj2E6Qu4jtvSARiMcHanhwG1iv2SHC\"]},\"contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x1a7d50510f40b48a570226319136ad1153986edec804d483dc2d3e836661e39a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56f3ed1fe07d786403001ffcd5c48c58f3f080406888d93e558aa84b780efbb3\",\"dweb:/ipfs/Qmaiu8sSKceuLcie54wuf1kX3kXVFvvWjW6w2q6ST7P3jY\"]},\"contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0x274d86a4443d21150ecfaa3dfa8ce4e1edee16769e07e0959256dcd96e82e0bc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f74d3a4658d57d350815fc125625d6e0c5b9445fb0bdb47f597f223e5f99af33\",\"dweb:/ipfs/QmaMfhZ9usJREGvKMX5fGeEiKML4F1S3NDiudk7EHFqjz6\"]},\"contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xc26e554054db346c733de6c7a3376cbd1a0c760917a9dabe11501d9e04b47804\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08ae91b2801c334183aabf7c081e0942037645383dd7a3ebd0919b3563a7a4c0\",\"dweb:/ipfs/QmYoc9P5P1qpFPT15WtKbwEbQWCawnbjvLXE38x7JD6VXo\"]},\"contracts/utils/Address.sol\":{\"keccak256\":\"0xb8d40721965efd93b5369d55083181226d3c7e1be4a968c04de35d44ba44f29a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5c4b0089788aa7112cce88602212c3895999f464e00d1c40d7f27ac9288798b\",\"dweb:/ipfs/Qmd69EuGeoCYPfPkGA4hayH4s2upmAe3XaoDf4ggYNEoZ4\"]},\"contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x2dd23b4e854fdc80221a19244de08d1a0cf0a640e5e427b3021acd91baaef1d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6480352009eb90d86eefb46ba55f9cc32df02fc785e7fa75425337b6f8f4a62\",\"dweb:/ipfs/QmYY5R8fnqXuMJmiPYwztzKo3xT5q8hBqKF79fRz7Z81r9\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"type":"error","name":"AddressEmptyCode"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"type":"error","name":"ERC1967InvalidImplementation"},{"inputs":[],"type":"error","name":"ERC1967NonPayable"},{"inputs":[],"type":"error","name":"FailedInnerCall"},{"inputs":[],"type":"error","name":"UUPSUnauthorizedCallContext"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"type":"error","name":"UUPSUnsupportedProxiableUUID"},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true}],"type":"event","name":"Upgraded","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"upgradeToAndCall"}],"devdoc":{"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","openzeppelin/=contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/proxy/utils/UUPSUpgradeable.sol":"UUPSUpgradeable"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/draft-IERC1822.sol":{"keccak256":"0x1ce621ae6673e12e26e7aa8316fa1ba6efaaddba28ecf3b061632a608d3e85f9","urls":["bzz-raw://d96d895818504e305df65cc1b08e40fa184a4d63f651519f236447766e8936bb","dweb:/ipfs/Qma7LsfZyEbwtmN3gj2E6Qu4jtvSARiMcHanhwG1iv2SHC"],"license":"MIT"},"contracts/proxy/ERC1967/ERC1967Utils.sol":{"keccak256":"0x1a7d50510f40b48a570226319136ad1153986edec804d483dc2d3e836661e39a","urls":["bzz-raw://56f3ed1fe07d786403001ffcd5c48c58f3f080406888d93e558aa84b780efbb3","dweb:/ipfs/Qmaiu8sSKceuLcie54wuf1kX3kXVFvvWjW6w2q6ST7P3jY"],"license":"MIT"},"contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0x274d86a4443d21150ecfaa3dfa8ce4e1edee16769e07e0959256dcd96e82e0bc","urls":["bzz-raw://f74d3a4658d57d350815fc125625d6e0c5b9445fb0bdb47f597f223e5f99af33","dweb:/ipfs/QmaMfhZ9usJREGvKMX5fGeEiKML4F1S3NDiudk7EHFqjz6"],"license":"MIT"},"contracts/proxy/utils/UUPSUpgradeable.sol":{"keccak256":"0xc26e554054db346c733de6c7a3376cbd1a0c760917a9dabe11501d9e04b47804","urls":["bzz-raw://08ae91b2801c334183aabf7c081e0942037645383dd7a3ebd0919b3563a7a4c0","dweb:/ipfs/QmYoc9P5P1qpFPT15WtKbwEbQWCawnbjvLXE38x7JD6VXo"],"license":"MIT"},"contracts/utils/Address.sol":{"keccak256":"0xb8d40721965efd93b5369d55083181226d3c7e1be4a968c04de35d44ba44f29a","urls":["bzz-raw://e5c4b0089788aa7112cce88602212c3895999f464e00d1c40d7f27ac9288798b","dweb:/ipfs/Qmd69EuGeoCYPfPkGA4hayH4s2upmAe3XaoDf4ggYNEoZ4"],"license":"MIT"},"contracts/utils/StorageSlot.sol":{"keccak256":"0x2dd23b4e854fdc80221a19244de08d1a0cf0a640e5e427b3021acd91baaef1d3","urls":["bzz-raw://b6480352009eb90d86eefb46ba55f9cc32df02fc785e7fa75425337b6f8f4a62","dweb:/ipfs/QmYY5R8fnqXuMJmiPYwztzKo3xT5q8hBqKF79fRz7Z81r9"],"license":"MIT"}},"version":1},"id":135}