{"abi":[{"type":"error","name":"CheckpointUnorderedInsertion","inputs":[]}],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec403fbe4006807f2da0ebd343c0f4a4b742e4ff13e59bbbb8a9730cb3f7a65064736f6c634300081b0033","sourceMap":"668:13600:197:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;668:13600:197;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec403fbe4006807f2da0ebd343c0f4a4b742e4ff13e59bbbb8a9730cb3f7a65064736f6c634300081b0033","sourceMap":"668:13600:197:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library defines the `Trace*` struct, for checkpointing values as they change at different points in time, and later looking up past values by block number. See {Votes} as an example. To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new checkpoint for the current transaction block using the {push} function.\",\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/structs/Checkpoints.sol\":\"Checkpoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin/=contracts/\"]},\"sources\":{\"contracts/utils/math/Math.sol\":{\"keccak256\":\"0xdb6d7e26320438bdd421598eb64e6fe2b03867a4dd07c9c820994b7bec26f7b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2adf1566393ddf260fb2064dd0c67be00123b8978be8b62cc45ac97aff859949\",\"dweb:/ipfs/QmaDLzQpnitEJDAJo4squpKumr5x4D2QYetPdT3jZd8hYm\"]},\"contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x2d1272bfe4b6c4954db4b7a91b63b1a6ac0366a77079f5178cbbb24a720c0b6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44da796f1a56dfb42b4f58869c732b0c0e83631fc69e2bc46cc97cbbd53d04e4\",\"dweb:/ipfs/QmTByUPcdfWSW3G4QG9Ax6utWvg69exzRnejrDFvJggKuz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"CheckpointUnorderedInsertion"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","openzeppelin/=contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/utils/structs/Checkpoints.sol":"Checkpoints"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/utils/math/Math.sol":{"keccak256":"0xdb6d7e26320438bdd421598eb64e6fe2b03867a4dd07c9c820994b7bec26f7b0","urls":["bzz-raw://2adf1566393ddf260fb2064dd0c67be00123b8978be8b62cc45ac97aff859949","dweb:/ipfs/QmaDLzQpnitEJDAJo4squpKumr5x4D2QYetPdT3jZd8hYm"],"license":"MIT"},"contracts/utils/structs/Checkpoints.sol":{"keccak256":"0x2d1272bfe4b6c4954db4b7a91b63b1a6ac0366a77079f5178cbbb24a720c0b6b","urls":["bzz-raw://44da796f1a56dfb42b4f58869c732b0c0e83631fc69e2bc46cc97cbbd53d04e4","dweb:/ipfs/QmTByUPcdfWSW3G4QG9Ax6utWvg69exzRnejrDFvJggKuz"],"license":"MIT"}},"version":1},"id":197}