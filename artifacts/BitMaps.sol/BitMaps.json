{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220262c0a2623b2ee4690f083359a2e84f632793a831ab80c0890ccc281b58319bc64736f6c634300081b0033","sourceMap":"858:1154:196:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;858:1154:196;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220262c0a2623b2ee4690f083359a2e84f632793a831ab80c0890ccc281b58319bc64736f6c634300081b0033","sourceMap":"858:1154:196:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential. Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor]. BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type. Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot, unlike the regular `bool` which would consume an entire slot for a single value. This results in gas savings in two ways: - Setting a zero value to non-zero only once every 256 times - Accessing the same warm slot for every 256 _sequential_ indices\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/structs/BitMaps.sol\":\"BitMaps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin/=contracts/\"]},\"sources\":{\"contracts/utils/structs/BitMaps.sol\":{\"keccak256\":\"0x72933550d26e49b379d4a5ebb2b1490149500e56c32282ecdfcae8e78878cf51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b5e23cf3859aeee05143363b51b9f05ce34191a4959db6671538b416284a98b\",\"dweb:/ipfs/Qma4X1xp6uNeq11vzbHpUMaDNmRZjgbPyZTCJ2NAKk15Wn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","openzeppelin/=contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/utils/structs/BitMaps.sol":"BitMaps"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/utils/structs/BitMaps.sol":{"keccak256":"0x72933550d26e49b379d4a5ebb2b1490149500e56c32282ecdfcae8e78878cf51","urls":["bzz-raw://7b5e23cf3859aeee05143363b51b9f05ce34191a4959db6671538b416284a98b","dweb:/ipfs/Qma4X1xp6uNeq11vzbHpUMaDNmRZjgbPyZTCJ2NAKk15Wn"],"license":"MIT"}},"version":1},"id":196}